swagger: "2.0"
info:
  version: "0.0.1"
  title: Code Louisville Winter 2018 JS-API
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
# follow RFC 6750, section 2.1.  Authorization Request Header Field
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /swagger:
    x-swagger-pipe: swagger_raw
  /signup:
    x-swagger-router-controller: userController
    post:
      operationId: usersSignup
      parameters:
        - name: userInfo
          in: body
          description: The user information to register
          required: true
          schema:
            # a pointer to a definition
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        "400":
          description: User already in database
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        "401":
          description: Authentication information is missing or invalid
          schema:
            $ref: "#/definitions/UnauthorizedError"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    x-swagger-router-controller: userController
    get:
      description: Returns json list of users
      security:
        - bearerAuth: []
      # used as the method name of the controller
      operationId: usersGet
      parameters: []
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/UserWithId"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /login:
    x-swagger-router-controller: userController
    post:
      operationId: usersLogin
      parameters:
        - name: userCredentials
          in: body
          description: The user credentials (user name and password)
          required: true
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Credentials"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersToken"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"    
  /logout:
    x-swagger-router-controller: userController
    post:
      security:
        - bearerAuth: []
      operationId: usersLogout
      parameters:
        - name: userToken
          in: body
          description: Disable access providing a valid token
          required: true
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersToken"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"    
  /users/{userId}:
    x-swagger-router-controller: userController
    put:
      description: Handles PUT for /users in order to update an existing user
      security:
        - bearerAuth: []
      # used as the method name of the controller
      operationId: usersPut
      parameters:
        - name: userId
          in: path
          description: The id of the user to update
          required: true
          type: integer
          format: int64
        - name: userInfo
          in: body
          description: The user information to update
          required: true
          schema:
            # a pointer to a definition
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        "401":
          description: Authentication information is missing or invalid
          schema:
            $ref: "#/definitions/UnauthorizedError"
        "403":
          description: Access forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
# complex objects have schema definitions
definitions:
  User:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      birthMonth:
        type: "integer"
      birthDay:
        type: "integer"
      birthYear:
        type: "integer"
      email:
        type: "string"
      password:
        type: "string"
        format: password
  Credentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        format: password
  UsersResponse:
    required:
      - message
    properties:
      message:
        type: string
  UsersToken:
    required:
      - token
    properties:
      token:
        type: "string"
  UnauthorizedError:
    required:
      - message
    properties:
      message:
        type: string
  UserWithId:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      birthMonth:
        type: "integer"
      birthDay:
        type: "integer"
      birthYear:
        type: "integer"
      email:
        type: "string"
      id:
        type: "integer"
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string